#1) 클라이언트가 웹에 로그인 하고나서 회원 정보를 유지하는 방법?

A) 쿠키나 세션을 이용하여 클라이언트 세션을 유지하고 후속 페이지에 개인화된 콘텐츠를 표시함.
Go 에서는, net/http 패키지를 사용하여 세션을 관리할 수 있음.
사용자가 로그인할때, 세션을 생성하고, 세션에 사용자에 대한 정보를 저장할 수 있음.
그 다음 후속 요청에서 사용자에게 활성된 세션이 있는지 확인하고 세션 데이터를 사용하여 페이지의 콘텐츠를 사용자 지정할 수 있음.

Go 에서 세션을 구현하는 인기있는 방법중 하나는 Third-party library 를 사용하는 것임.


#1-1) 세션에 대해서 더 설명해줘.

A) 세션은 HTTP 요청들 사이에서 서버에 사용자별 데이터를 저장하는 방법임.
사용자가 웹 애플리케이션에 로그인하면 세션이 생성되고 고유한 세션 ID가 생성됨.
이 ID는 사용자 브라우저의 쿠키에 저장되므로 동일한 브라우저의 후속 요청이 서버의 동일한 세션과 연결될 수 있음.

세션 데이터는 일반적으로 서버의 메모리 또는 데이터베이스임.
사용자가 서버에 요청하면 서버는 쿠키에서 세션 ID를 조회하고 해당 세션 데이터를 검색함.
그 다음 서버는 이 데이터를 사용하여 사용자에 대한 응답 컨텐츠를 개인화함.


#1-2) Third-party library 에 대해 더 설명해줘.

A) Go의 "Third-party library"중 하나인 "gorilla/sessions library"를 이용하여 웹 애플리케이션의 세션을 관리함.
서버 데이터 생성, 읽기 및 쓰기를 위한 사용하기 쉬운 인터페이스 제공함.


#1-3) 쿠키에 대해 더 설명해줘.

A) 쿠키는 웹사이트에서 사용자의 웹 브라우저로 전송되어 사용자의 장치에 저장되는 작은 데이터 조각임.
쿠키는 종종 사용자 기본 설정, 로그인 정보 및 기타 검색 기록을 기억하는데 사용됨.

세션에서, 쿠키는 클라이언트 측에 세션 ID를 저장하는 데 사용된다.
사용자 로그인 -> 서버가 고유한 세션 ID를 생성 -> 쿠키로 클라이언트에게 보냄
-> 클라이언트는 쿠키를 저장 -> 요청과 함께 서버로 다시 보냄 -> 서버가 사용자 식별 및 세션 데이터 검색


#2) 미들웨어 함수에 대해 더 설명해줘.
미들웨어 함수는 클라이언트와 서버 사이에 위치하며, 메인 핸들러 함수가 실행되기 전이나 후에 수행됨.
미들웨어 함수는 재사용 가능한 기능을 제공하고, 기능으로서는 로깅 / 인증 / 속도 제한 / 요청 유효성 검사 등이 있음.


메인 핸들러 이전의 미들웨어 함수의 기능들은 요청 구문 분석이 있음.
메인 핸들러 이후의 미들웨어 함수의 기능들은 응답 로깅 / 응답 헤더 수정 / 응답 본문에 추가 데이터를 추가함 등이 있음.
이런 작업들은 응답을 클라이언트에게 보내기 전에 추가 기능을 제공하거나 응답을 수정하는 데 도움이 될 수 있음.

세션에서 쓰이는 미들웨어 함수 기능으로서는 세션 상태를 설정하고 관리할 수 있음.
ex) 쿠키에서 세션 ID를 구문 분석하고, DB에서 세션 데이터를 검색할 수 있음. 기본 처리기 기능에서 접근할 수 있도록 요청에 세션 데이터를 추가할 수 있음.
